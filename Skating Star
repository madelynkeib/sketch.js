class Star {
  constructor(pos, vel, radius, color) {
    this.pos = pos;
    this.vel = vel;
    this.radius = 2*radius;
    this.color = color;
  }
  move() {
    this.vel.y += 0.1;
    this.pos.add(this.vel);
    if (this.pos.x < this.radius) {
      this.pos.x = this.radius;
      this.vel.x = -this.vel.x;
    }
    if (this.pos.x > width-this.radius) {
      this.pos.x = width-this.radius;
      this.vel.x = -this.vel.x;
    }
    if (this.pos.y < this.radius) {
      this.pos.y = this.radius;
      this.vel.y = -this.vel.y;
    }
    if (this.pos.y > height-this.radius) {
      this.pos.y = height-this.radius;
      this.vel.y = -this.vel.y;
    }
  }
  render() {
    fill(this.color);
//rect(this.pos.x, this.pos.y, this.radius*2);
    translate(width * 0.8, height * 0.5);
  rotate(frameCount / -100.0);
  star(this.pos.x, this.pos.y, 30, 70, 5);
}   
}

let stars = [];

function setup() {
  createCanvas(400, 400);
  for (i = 0; i < 1; i++) {
    stars.push(new Star(
      createVector(random(width),random(height)),
      p5.Vector.random2D().mult(random(10)),
      30,
      color(random(255),random(255),random(255))
    ));
  }
}
function star(x, y, radius1, radius2, npoints) {
  let angle = TWO_PI / npoints;
  let halfAngle = angle / 2.0;
  beginShape();
  for (let a = 0; a < TWO_PI; a += angle) {
    let sx = x + cos(a) * radius2;
    let sy = y + sin(a) * radius2;
    vertex(sx, sy);
    sx = x + cos(a + halfAngle) * radius1;
    sy = y + sin(a + halfAngle) * radius1;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}

function draw() {
  background(255);
 
  for(let i = 0; i < stars.length; i++) {
    for(let j = 0; j < i; j++) {
      stars[i].collide(stars[j]);
    }
  }
 
  for(let i = 0; i < stars.length; i++) {
    stars[i].move();
    stars[i].render();
  }
}

//I used a template I found online and changed it to a star but couldn't figure out how to make it stay in the borders with a chape that has different sized sides 
